<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>鱼</title>
  
  <subtitle>一条咸鱼</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-10-09T13:22:48.520Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>HaooJie</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>DH(Diffie–Hellman)算法</title>
    <link href="http://yoursite.com/2018/10/09/DH-Diffie%E2%80%93Hellman-%E7%AE%97%E6%B3%95/"/>
    <id>http://yoursite.com/2018/10/09/DH-Diffie–Hellman-算法/</id>
    <published>2018-10-09T09:49:24.000Z</published>
    <updated>2018-10-09T13:22:48.520Z</updated>
    
    <content type="html"><![CDATA[<h2 id="DH密钥协商（Diffie–Hellman-key-exchange）算法"><a href="#DH密钥协商（Diffie–Hellman-key-exchange）算法" class="headerlink" title="DH密钥协商（Diffie–Hellman key exchange）算法"></a>DH密钥协商（Diffie–Hellman key exchange）算法</h2><p>DH 是 Diffie-Hellman的首字母缩写，是Whitefield与Martin Hellman在1976年提出了一个的密钥协商协议。其安全性源于在有限域上计算离散对数。该算法可以使两个用户之间安全地交换一个密钥，但不能用于加密或解密信息。</p><p>####原理：</p><p><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/4/46/Diffie-Hellman_Key_Exchange.svg/427px-Diffie-Hellman_Key_Exchange.svg.png" alt="维基百科示例"></p><ol><li>Alice和Bob首先约定好公开的一种颜色，比如黄色</li><li>Alice和Bob各自挑选出一种私密的颜色，比如橙色和青色</li><li>Alice和Bob各自将两种颜色混合起来</li><li>双方交换混合后的颜色</li><li>Alice和Bob各自将自己的私密颜色再次混入得到的颜色中</li><li>现在Alice和Bob得到了一种相同的颜色，这种颜色是由一份黄色、一份橙色、一份青色混合而来，但外界无法得知</li></ol><p>颜色混合是一种“不可逆”的操作，当双方交换颜色时，尽管我们知道他们交换的颜色都是由一份黄色和另一份其他颜色混合得到的，但我们还是无法或者很难得到他们的私密颜色。而DH秘钥交换的原理非常相似，也是利用了数学上的一个<code>“不可逆”</code>的运算，就是<code>离散对数</code></p><p><code>乘方得逆运算称为对数运算</code>，比如已知</p><p><strong>7^x = 49</strong> </p><p>那么可知</p><p><strong>x = log7 49 = 2</strong></p><p>对数运算非常容易，即使在数字很大的时候是，但如果是下面的情况</p><p><strong>7^x mod 13 = 8</strong> </p><p>求X的过程称为“离散对数”，就不那么容易了，在数字很大时几乎是一个不可能的运算，而DH秘钥交换就是利用了这种离散对数计算非常困难的特性来设计的。</p><p>公式里的mod是取模运算，取模运算有几条基本的定律如下</p><p><strong>(a+b) mod P = (a mod P + b mod P) mod P </strong></p><p><strong>(a<em>b) mod P = (a mod P </em> b mod P) mod P </strong></p><p><strong>(a^b) mod P = ((a mod P)^b) mod P</strong> </p><p>根据上面的公式，可以推导出一个非常重要的公式</p><p><strong>(G^(a*b)) mod P = (G^a mod P)^b mod P = (G^b mod P)^a mod P</strong> </p><p>根据这个公式，我们可以向上面交换颜色那样设计出一个秘密交换数字的流程出来</p><ol><li><p>A和B首先约定两个公开的质数 p 和 g</p></li><li><p>A和B各自随机产生两个数 a, b，作为自己的私钥</p></li><li><p>各自计算出自己的公钥 A, B</p><p><strong>A = g^a mod p</strong> </p><p><strong>B = g^b mod p</strong> </p></li><li><p>交换公钥 A, B</p></li><li><p>计算出加密用的密钥S</p><p><strong>Sa=B^a mod p=(g^b mod p)^a mod p=g^(a*b) mod p</strong> </p><p><strong>Sb=A^b mod p=(g^a mod p)^b mod p=g^(a*b) mod p</strong> </p></li></ol><p>最终两个人得到的秘密数字都是 g^(ab) mod p，而窃听者仅从p, g, A, B四个公开信息，是无法得到这个秘密数字的</p><p>举个例子，假如 p=23，g=5，Alice选取的秘密数字 a=6，那么 A=5^6 mod 23=8，Bob选取的秘密数字是 b=15，那么 B=5^15 mod 23=19，交换A和B后，Alice计算出的密钥 Sa=19^6 mod 23=2，Bob计算出的密钥 Sb=8^15 mod 23=2<br>当然，实际运算中不可能取这么小的数值，比如如果需要128bit长度的密钥，那么p值需要是128bit长度的质数，由于有模运算，所获得的密钥不会大于p，所以p值可以是128bit数字中最大的一个质数，g可以随便设置一个小的质数即可。</p><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><p>如果注意的是，为了防止应用优化算法计算上述问题，<strong>质数p不是随便选择</strong>的，需要符合一定的条件。</p><p><strong>随机数a、b的生成算法也必需注意</strong>，应使结果尽可能随机，不能出现可预测的规律，否则会使破解变的容易。</p><p>通过上述计算过程也可以看出DH算法不仅可以应用在2方通信的情况，如果<strong>多方通信</strong>，也可以使用该算法。</p><p>DH密钥交换算法<strong>无法验证对方身份</strong>，所以DH密钥交换算法<strong>不能抵御中间人攻击</strong> </p><p><strong>DH算法中间人攻击原理：</strong> </p><p>从其原理之中可以看出，a，b 值并没有什么关系，<code>a，b不能证明通信双方Alice与Bob的身份</code>，这使得<code>重放攻击</code>可以轻易产生。</p><p>假设一个攻击者 Tom，当 Alice 向 Bob 发送 g, p, A 时，Tom 截获了信息，并（假装自己是 Bob）向 Alice 发送了 T=g^t mod p，其中 t 是 Tom 的私钥。同时 Tom（假装自己是 Alice）向 Bob 发送 g，p，T=g^t mod p，这样 Bob 以为这是 Alice 发过来的，就向 T 发送了 B=g^b  mod p。</p><p>在 Alice 与 Tom 之间，创建的密钥就是 Sta=g^at mod p，两方密钥相同。</p><p>在 Tom 与 Bob 之间，创建的密钥就是 Stb=g^tb mod p，两方密钥相同。</p><p>这样，密钥创建完成，Alice 与 Bob 都认为自己与对方分享了只有他们两人所知的密钥，实际上并不是。当 Alice 想要发信息给 Bob 时，Alice 就会将信息用 Sta=g^at mod p 加密后发出，消息 Bob 无法解密，但会被 Tom 收到并解密，这样 Tom 可以或者扣留信息，或者篡改信息用 Stb=g^tb mod p 加密后发给 Bob，这样 Bob 会收到他认为是 Alice 发来的，其实是 Tom 发过来的经过篡改的信息。这样重放攻击就产生了。</p><p><strong>解决：</strong> </p><p>可以采用数据签名技术解决中DH密钥交换过程中可能存在的中间人攻击</p><h4 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h4><p>链接：</p><p><a href="https://www.jianshu.com/p/18aed34904c9" target="_blank" rel="noopener">DH密钥交换（Diffie–Hellman key exchange）算法笔记</a> </p><p><a href="https://thecodeway.com/blog/?p=964" target="_blank" rel="noopener">一个简单的DH密钥协商算法的实现</a> </p><p><a href="https://en.wikipedia.org/wiki/Diffie%E2%80%93Hellman_key_exchange" target="_blank" rel="noopener">Diffie–Hellman key exchange</a> </p><p><a href="https://blog.csdn.net/wxlqaz1995/article/details/52693407?locationNum=13" target="_blank" rel="noopener">关于Diffie-Hellman密钥协商机制以及中间人攻击</a> </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;DH密钥协商（Diffie–Hellman-key-exchange）算法&quot;&gt;&lt;a href=&quot;#DH密钥协商（Diffie–Hellman-key-exchange）算法&quot; class=&quot;headerlink&quot; title=&quot;DH密钥协商（Diffie–Hell
      
    
    </summary>
    
    
      <category term="密码学" scheme="http://yoursite.com/tags/%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>快速幂算法</title>
    <link href="http://yoursite.com/2018/10/09/%E5%BF%AB%E9%80%9F%E5%B9%82%E7%AE%97%E6%B3%95/"/>
    <id>http://yoursite.com/2018/10/09/快速幂算法/</id>
    <published>2018-10-09T02:56:15.000Z</published>
    <updated>2018-10-09T05:40:23.865Z</updated>
    
    <content type="html"><![CDATA[<h2 id="快速幂算法"><a href="#快速幂算法" class="headerlink" title="快速幂算法"></a>快速幂算法</h2><h4 id="平方乘算法"><a href="#平方乘算法" class="headerlink" title="平方乘算法"></a>平方乘算法</h4><p>RSA 加解密中存在指数运算 X^a。通常解密运算中的指数非常大，a 的二进制位数通常会大于等于1024 bit，即可能 a &gt;= 2^1024。如果用一般方法直接计算 X^a 的值， 即 X*X*X……需要的运算量非常大，很容易溢出。</p><p>定义：MUL 为乘法运算即乘以 X，sq 为平方运算</p><p>考虑一个例子计算 X^8，则最简单的方法需要8次乘法运算<br><img src="http://blog.chinaunix.net/attachment/201612/7/28852942_1481110425d8oz.png" alt="img"></p><p>而更快捷的方法只需要3次平方运算<br><img src="http://blog.chinaunix.net/attachment/201612/6/28852942_1481029833JAX4.png" alt="img"><br>在看一个更一般的例子，计算 X^24，最简单的方法就是计算24次乘法。</p><p>更有效的方法如下：即一次平方操作，一次乘法操作(乘以 X)，之后再三次平放操作。 即5次操作即可得到结果<br><img src="http://blog.chinaunix.net/attachment/201612/6/28852942_1481030092Hl1m.png" alt="img"><br>也就是说对于指数运算两种基本操作就可以得到结果：对当前结果平方，当前结果与 X 相乘。问题是如何确定平方与乘法的执行顺序, 平方-乘算法就可以解决这个问题。</p><p><strong>大致描述为： 对 X^a  将指数 a 表示为2进制形式，高bit在左，然后从左至右扫描对应的 bit 位。除了最左边的 bit（MSB）以外，在扫描之后每个 bit 位时对当前结果平方，如果该bit位为1，则需多进行一次乘法操作</strong></p><p>以计算 X^24 为例：</p><blockquote><p>黑体表示二进制形式</p></blockquote><p>X^24 将指数表示为二进制形式 X^<strong>11000</strong> 表示为 X^<strong>b1b2b3b4b5</strong></p><p>开始扫描指数的每个Bit: </p><ol><li>初始值 X = X^<strong>1</strong>;                 初始化设置，<strong>b1</strong> = 1，扫描第一个bit时不需要做其他操作</li><li>X^2 = X^<strong>11</strong>                      <strong>b2</strong>=1，先平方 X^2*X = X^3 = X<strong>11</strong> ，再乘以 X</li><li>(X^3)^2 = X^6 = X^<strong>110</strong>          <strong>b3</strong>= 0，只需要一次平方</li><li>(X^6)^2 = X^12 = X^<strong>1100</strong>         <strong>b4</strong> = 0，只需要一次平方</li><li>(X^12)^2 = X^24 = X^<strong>11000</strong>     <strong>b5</strong> = 0,只需一次平方</li></ol><p>通过观察运算过程中指数的二进制表示的变化能更好的理解算法，一次平方操作会让指数向左移一位，并在最右边添加0，<br>而与 X 相乘的操作即在指数的最右边位置上填上 1 </p><h4 id="快速幂算法-1"><a href="#快速幂算法-1" class="headerlink" title="快速幂算法"></a>快速幂算法</h4><p><strong>所谓的快速幂，实际上是快速幂取模的缩写，简单的说，就是快速的求一个幂式的模(余)。在程序设计过程中，经常要去求一些大数对于某个数的余数，为了得到更快、计算范围更大的算法，产生了快速幂取模算法。</strong></p><p>快速幂实现基于引理：积的取余等于取余的积的取余，即：</p><p><strong>(a * b) mod n=(a mod n * b mod n) mod n</strong> </p><p>示例：4^24 mod 102 = 52</p><p>24 = <strong>11000</strong></p><p>4^24 mod 102     = ( ( ( ( (4^1)*(4^1)^2 ) ^2) ^2) ^2) mod 102</p><p>​                = ( ( ( 64 ^2) ^2) ^2) mod 102</p><p>​                = ( ( ( 64 ^2) ^2) mod 102) ^2 mod 102</p><p>​                = ( ( ( 64 ^2) mod 102)^2 mod 102) ^2 mod 102</p><p>​                = ( ( 256 mod 102)^2 mod 102) ^2 mod 102</p><p>​                = ( 52^2 mod 102) ^2 mod 102</p><p>​                =  ( 52^2) mod 102</p><p>​                = 52</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;快速幂算法&quot;&gt;&lt;a href=&quot;#快速幂算法&quot; class=&quot;headerlink&quot; title=&quot;快速幂算法&quot;&gt;&lt;/a&gt;快速幂算法&lt;/h2&gt;&lt;h4 id=&quot;平方乘算法&quot;&gt;&lt;a href=&quot;#平方乘算法&quot; class=&quot;headerlink&quot; title=&quot;平方乘
      
    
    </summary>
    
    
      <category term="密码学" scheme="http://yoursite.com/tags/%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>PPP协议详解</title>
    <link href="http://yoursite.com/2018/09/28/PPP%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3/"/>
    <id>http://yoursite.com/2018/09/28/PPP协议详解/</id>
    <published>2018-09-28T08:05:33.000Z</published>
    <updated>2018-09-28T08:13:04.654Z</updated>
    
    <content type="html"><![CDATA[<h2 id="点对点协议（Point-to-Point-Protocol，PPP）"><a href="#点对点协议（Point-to-Point-Protocol，PPP）" class="headerlink" title="点对点协议（Point-to-Point Protocol，PPP）"></a>点对点协议（Point-to-Point Protocol，PPP）</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>​    点对点协议（Point-to-Point Protocol，PPP），工作在数据链路层。设计目的主要是用来通过拨号或专线方式建立点对点连接发送数据，使其成为各种主机、 网桥和路由器之间简单连接的一种共通的解决方案。 </p><h3 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h3><ol><li>建立、配置数据链路连接的LCP（Link Control Protocol）</li><li>网络控制协议NCP（Network Control Protocol）</li><li>将IP数据报封装到串行链路的方法</li></ol><h3 id="帧格式"><a href="#帧格式" class="headerlink" title="帧格式"></a>帧格式</h3><p>​    PPP协议的数据单元称为帧，格式如图</p><p><img src="https://images2015.cnblogs.com/blog/1035967/201705/1035967-20170505193447492-1727900175.png" alt="PPP协议的数据单元称为帧"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;点对点协议（Point-to-Point-Protocol，PPP）&quot;&gt;&lt;a href=&quot;#点对点协议（Point-to-Point-Protocol，PPP）&quot; class=&quot;headerlink&quot; title=&quot;点对点协议（Point-to-Point Pro
      
    
    </summary>
    
    
      <category term="网络协议" scheme="http://yoursite.com/tags/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2018/09/27/Hello-World/"/>
    <id>http://yoursite.com/2018/09/27/Hello-World/</id>
    <published>2018-09-27T13:30:31.000Z</published>
    <updated>2018-09-27T15:10:45.575Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h2><h3 id="Test-code"><a href="#Test-code" class="headerlink" title="Test code"></a>Test code</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Hello World\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Hello-World&quot;&gt;&lt;a href=&quot;#Hello-World&quot; class=&quot;headerlink&quot; title=&quot;Hello World&quot;&gt;&lt;/a&gt;Hello World&lt;/h2&gt;&lt;h3 id=&quot;Test-code&quot;&gt;&lt;a href=&quot;#Test-cod
      
    
    </summary>
    
    
      <category term="test" scheme="http://yoursite.com/tags/test/"/>
    
  </entry>
  
</feed>
